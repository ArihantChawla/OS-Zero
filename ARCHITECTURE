Ideas and Notes for Zero Software Architecture
----------------------------------------------

Goals
-----
- modern Unix-like kernel with advanced thread scheduler features
  - support for pseudo-realtime tasks run on separate interrupt timers such as
    HPET
    - audio and video synchronization
- hardware and software support for multimedia production and games as well as
  lighter-weight user applications

System Overview
---------------

		System Layers
		-------------

		-----------------
USER		| User Software |
		-----------------
			.
		       / \
			|
		       \./
		-----------------	------------------
SYSTEM		| System Kernel |<----->| Device Drivers |
		-----------------	------------------
						.
					       / \
						|
					       \./
					------------------
HARDWARE				|    Hardware    |
					------------------

Kernel Abstractions
-------------------

CPU Abstractions
----------------

- trap; interrupt management
  - hardware or software interrupts, aka traps, interrupts, aborts, faults, etc.
  - used to read user input without polling as well as other I/O operations
- process; a unit of execution; may consist of several threads
  - thread; a 'light-weight' process; an entity for scheduling

Memory Abstractions
-------------------

- page; base unit of memory management
  - protection and other attributes for implementing virtual memory
- buffer; I/O buffer
  - static or dynamic size buffer cache
- segment; shared-memory region

I/O Abstractions
----------------

- node; I/O object
  - file, directory, [named or anonymous] pipe, socket, message queue,
    semaphore, etc.

Code Modules
------------

System Kernel
-------------

kern
----

- Portable base kernel modules
- <mem.h> - memory abstraction
  - <mag.h> - magazine buffer layer
  - <slab.h> - slab allocator
- <io.h> - I/O primitives
- <buf.h> - buffer/block cache interface
  - support buffers mapped read-only into user processes; avoid system-to-user
    copies for purposes such as multimedia streaming
  - cache TCP/IP checksums for [static] buffers sent to network
- <ipc.h> - inter-process communication primitives
- <types.h> - kernel types
- <page.h> - page structures and management
- <proc.h> - process and thread support
- <msg.h> - message queue interface; high-speed shared memory for localhost
- <syscall.h> - system call interface
- <tmr.h> - event timer interface; PIT, APIC, HPET

libpu
-----

- A library to support different processor units (ALU, FPU, GPU,
  physics units (PPU) a'la PhysX, and so forth).
- Thread schedulers for different scenarios; desktop vs. server mode
- Process and thread abstractions.

libkmem
-------

- Kernel memory support library.
- <sem.h> - semaphores
- <mtx.h> - mutex interface; use machine words instead of mutex structures
- <map.h> - mapping physical memory and files to virtual memory
- <shm.h> - shared memory support
- <page.h> - page-directories and page-tables
- <mbuf.h> - memory buffers

libkio
------

- Kernel I/O abstraction.
- <io.h> - machine-dependent I/O such as X86 ports
- <dma.h> - direct memory access
- <iobuf.h> - I/O buffer/block cache
- sock, fifo, pipe, fbuf data objects

User Software
-------------

libc
----

- ISO/POSIX compatible C Standard Library implementation.
- <mem.h> and mem.c; memory management routines
- <assert.h> - assert()
- <limits.h> - integral presentation characteristics
- <setjmp.h> - non-local goto
- <stddef.h> - standard definitions
- <stdint.h> - integral types
- <unistd.h> - POSIX features
- <stdlib.h> - standard library functionality
- <malloc.h> - Unix-style dynamic memory operations
  malloc
  ------
  - Dual-layer buffers
    - Bonwick style magazine layer on top of slab layer
  - support for both heap and mapped memory
- <stdio.h> buffered I/O interface
- <endian.h> - POSIX- and BSD-style endianess feature macros
- malloc-interface dynamic memory manager

libm
----

- Support for ISO 754 format floating point values.
- i387 FPU support.
- Basic trigonometry.

libzero
-------

- Zero utility library.
- <cdecl.h> - compiler support, e.g. alignment and packing attributes
- <param.h> - machine configuration
- <simd.h> - SIMD support, e.g. MMX, SSE, and hopefully Altivec
  - vector types for SIMD words
- <trix.h> - clever bitwise and other macros

libgfx
------

- Graphics support library with composition, rendering, and optional dithering.
- <obj.h> - graphics object declarations
  - pixel, dot, circle/ellipse, rectangle, triangle, line, polyline, segment
- <op.h> - basic graphics operations
  - gfxmapfb(bus, dev);
  - gfxplotpix(buf, x, y, pix);
    - gfxdithpix(buf, x, y, pix);
    - gfxrendpix(buf, x, y, pix);
    - gfxblendpix(buf, x, y, pix, alpha);
    - gfxaddpix(buf, x, y, pix);
    - gfxdithbuf(src, dest, x, y, w, h);
    - gfxrendbuf(src, dest, x, y, w, h);
    - gfxblendbuf(src, dest, x, y, w, h);
    - gfxaddbuf(src, dest, x, y, w, h);
  - gfxdrawtext(buf, x, y, text, len);
    - gfxsetbg(text, pix);
    - gfxsetfg(text, pix);
    - gfxsetaa(text, bool);
    - gfxsetblend(text, bool);
    - gfxsetfont(text, bool);
    - gfxsetul(text, bool);
    - gfxsetblink(text, bool, nusec);
- <hw.h> - hardware accelerated graphics interface

libimg
------

- <fmt.h>
  - raw, tga, gif, png, jpg, xcf
- <op.h>
  - dithering routines
  - rendering routines
  - blend routines
  - fade routines
  - [logical/bitwise] raster operations

libppu
------

- Support library for physics accelerators such as PhysX.

libsnd
------

- Audio library.
- <mix.h> - mixer interface/object
- <seq.h> - sequencer
- <pat.h> - patch interface
- <dsp.h> - DSP interface

libav
-----

- Audio/video interface library.

libgl
-----

- Implementation of OpenGL (Mesa?)

libcl
-----

- Implementation of OpenCL (Cuda, AMD, etc.)

libdx
-----

- Implementation of DirectX?

