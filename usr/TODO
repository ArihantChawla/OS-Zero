tools/zas
---------
- modularise input processing
  - readfile()
	- read whole input file; use buffering
  - getinstr()
	- read instruction [line]
	- asgetmnem()
	  - read operation mnemonic
	- asgetarg()
	  - read register or memory operand
	- asgetsym()
	- asgetexpr
	- vmloadarg
	  - load register or memory location

tools/zcc
---------
- test + fix the tokeniser; add support for more of c99 and c11
- implement [first subset of] ANSI/ISO C
  - some GCC-style extensions implemented
  . __inline__, aligned, packed
- cppgetfile()
  - cpphashstr()
  - cpphashmacro()
  - cppemitmacro()
- ccgetexpr()
  - utilise dijkstra's shunting-yard algorithm for expressions
- ccgettype()
  - ccgetstdtype()
  - ccgettypedef()
- ccgetfunc()
- ccgetdecl(),
  - ccgettype()
  - ccgetid()
    - ccgetnum()
    - ccgetsym()
- ccgetop()

tools/zed
---------
- small programmer's editor
  - use zcc tokeniser for c syntax analysis and highlights
  - re-engineer zas to work for editing assembly; syntax highlights
  - auto-indent; optionally replace TAB with spaces
  - modular implementation; allow hooks for different programming languages
	- indent(), hilite()
  - use allocated slices for text
	- 128 or 64 bytes
	- linked list for editing
	- readv(), writev()

tools/zvm
---------
- a thin machine abstraction for computations
  - bytecode interpreter ("virtual machine")
  - utilise zas for assembly programming
  - RISC-like instruction set
  - vector-based intermediate language for compilers and such

