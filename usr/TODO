lib/zero, lib/c
---------------
- handle keyboard and mouse actions with events
  - keydown, keyup, pntdown, pntup
	- keyboard scan-codes of up to 64 bits
	  - the biggest I know for PC is 6-byte
	  - 32-bit modifier mask
	- mouse events
	  - move; new x- and y-coordinates, button/modifier mask of 32 bits
        - hints and contiguous movement
	  - click; mouse button pressed
	  - release; mouse button released
	  - button ID; 32-bit
	  - mask; 32-bit mask of 16 buttons and 16 modifier/special keys
- notification mechanism for filesystem events
  - creat, destroy, link, unlink, mkdir, rmdir
- IPC facilities
  - kernel to user; signals
  - user to user; mutexes/semaphores, message queues (sysv and posix)

tools/zas
---------
- modularise input processing
  - readfile()
	- read whole input file; use buffering
  - asgetinstr()
	- read instruction [line]
	- asgetmnem()
	  - read operation mnemonic
	  - multilevel byte-indexed table lookup structure
	- asgetarg()
	  - read register or memory operand
	- asgetsym()
	- asgetexpr
	- vmloadarg
	  - load register or memory location

tools/zcc
---------
- test + fix the tokeniser; add support for more of c99 and c11
- implement [first subset of] ANSI/ISO C
  - some GCC-style extensions implemented
  . __inline__, aligned, packed
- cppgetfile()
  - cpphashstr()
  - cpphashmacro()
  - cppemitmacro()
- ccgetexpr()
  - utilise dijkstra's shunting-yard algorithm for expressions
- ccgettype()
  - ccgetstdtype()
  - ccgettypedef()
- ccgetfunc()
- ccgetdecl(),
  - ccgettype()
  - ccgetid()
    - ccgetnum()
    - ccgetsym()
- ccgetop()
- ccgencode()
  - generate intermediate code for optimisers and such
  - vector-based a'la VCODE

tools/zed
---------
- small programmer's editor
  - use zcc tokeniser for c syntax analysis and highlights
  - re-engineer zas to work for editing assembly; syntax highlights
  - auto-indent; optionally replace TAB with spaces
  - modular implementation; allow hooks for different programming languages
	- indent(), hilite()
  - use allocated slices for text
	- 128 or 64 bytes by default, reallocate dynamically
	- linked list for editing
	- readv(), writev() for vector I/O of buffer lines

tools/zvm
---------
- a thin machine abstraction for computations
  - bytecode interpreter ("virtual machine")
  - utilise zas for assembly programming
  - RISC-like instruction set
  - graphical debugger;
	- register contents (step, request)
	  - program counter aka instruction pointer
	  - stack pointer
	    - current old frame-pointer and return value on call stack
		- back-trace stack N steps; default one
	  - frame pointer
	- function stack-trace
	- stack contents
	  - 

lib/vc
-------
- vector-based intermediate code for compilers and interpreters
- emit bytecode for zvm and other architectures
  - gen.c and gen.h for machine abstraction


