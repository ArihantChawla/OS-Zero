The vc-library aims to implement a vector-based intermediate language
for compilers and such development tools to communicate code in.

The library encapsulates computations commonly taken care of by modern
microprocessors; the approach is RISC-like, i.e. splitting the 
computations to small parts; e.g. for an optimiser, the code should be
relatively easy to tune for less data-dependencies and otherwise fast
ways for execution.


RANDOM NOTES
------------

The notes below are based on a document I found on VCode somewhere on
the Internet. :)

primitive types
---------------
- integer (int); signed integers (lets make them 64-bit)
- boolean (bool); T or F (64-bit)
- floating-point (float); double-precision (64-bit) floating point
  numbers
- character (char); characters
- segment descriptor (segdes)

- all objects are homogenous vectors of one of the above types or an
  untyped pair of vcode objects
- scalars are simply single-element vectors

instructions
------------

elementwise operations
----------------------

{int | float] + {INT, FLOAT}	- return sum of top two vectors on stack
{int | float} - {INT, FLOAT}	- return difference of top two vectors
{int | float} * {INT, FLOAT}	- return product of top two vectors
{int | float} / {INT, FLOAT}	- return quotient of top two vectors
{int}         % {INT, FLOAT}	- return remainder of top two vectors
{bool}        < {INT, FLOAT}	- less than
{bool}        <= {INT, FLOAT}	- less than or equal to
{bool}        > {INT, FLOAT}	- greater than
{bool         >= {INT, FLOAT}	- greater than or equal to
{bool}        = {INT, FLOAT}	- equality
{bool}        != {INT, FLOAT}	- inequality
{int}         LSHIFT		- shift left
{int}         RSHIFT		- shift right
{bool | int}  NOT {BOOL, INT}	- negation (boolean for bool, bitwise for int) 
{bool | int}  AND {BOOL, INT}	- boolean AND
{bool | int}  OR {BOOL, INT}	- boolean OR
{bool | int}  XOR {BOOL, INT}	- boolean exclusive OR
{int | bool | float} SELECT {INT, BOOL, FLOAT}	    - T means first, F second
{int}         RAND		- random number vector; for n, in range 0..n-1
{int}         FLOOR		- truncate towards negative infinity
{int}         CEIL		- truncate towards positive infinity
{int}         TRUNC		- truncate towards zero
{int}         I_TO_F		- convert int vector into float vector
{bool}        I_TO_B		- convert int vector into bool vector; 0 is F
{int}         B_TO_I		- convert boolean into int
{float}       LOG		- natural logarithm; elements must be positive
{float}       SQRT		- square root; elements must be positive
{float}       EXP		- exponential function
{float}       SINE		- sine of the vector
{float}       COS		- cosine of the vector
{float}       TAN		- tangent of the vector
{float}       ASIN		- inverse sine of the vector
{float}       ACOS		- inverse cosine of the vector
{float}       ATAN		- inverse tangent of the vector
{float}       SINH		- hyperbolic sine of the vector
{float}       COSH		- hyperbolic cosine of the vector
{float}       TANH		- hyperbolic tangent of the vector

- vector instructions
- segment descriptor instructions
- control instructions
- I/O instructions

