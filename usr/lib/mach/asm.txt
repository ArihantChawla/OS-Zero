l8bmach - short introduction
----------------------------

usage
-----
#include <mach/asm.h> // machine interface

types
-----

<mach/asm.h> includes per-platform headersto define the following atomic_t types.

do not forget to declare in-memory data volatile where due.

machine types
-------------
m_reg_t		- signed word/register
m_adr_t         - storage for address value
m_ptr_t         - pointer

atomic types
------------
m_atomic8_t	- signed 8-bit atomic
m_atomic16_t	- signed 16-bit atomic
m_atomic32_t	- signed 32-bit atomic
m_atomic64_t	- signed 64-bit atomic
m_atomicptr_t	- atomic pointer storage
m_atomicptr8_t	- atomic 8-bit pointer for arithmetics
m_atomicadr_t	- atomic address for flag-bit

macros
------

- m_membar() - memory barrier
  - synchronize pending mempry operations
- m_memddbar()   - data dependency barrier
  -
* - m_memrdbar()   - read barrier
 * - m_memwrbar()   - write barrier
 * m_waitspin()         - pause, wait, or loop (in spin-wait loops)
 * m_endspin()          - exit spin-loop (where relevant, empty elsewhere)
 * m_waitint()  	- pause until interrupt received
 * m_cmpswap()  	- atomic compare and swap operation
 * m_fetchadd()   	- atomic fetch and add
 * m_getretadr(pp)      - get return address of current function to *(pp)
 * m_setretadr(pp)      - store return address of current function to *(pp)
 */
