Zero Processor Unit
-------------------

Preface
-------

The goal of the ZPU project is to implement a simple ALU and utilise software
floating point math. This would be done to facilitate building mini game
consoles using FPGA hardware such as Papilio with graphics and audio support.

ZPU shall use 64-bit registers with support for rational numbers as 32-bit
nominator and denominator fields as well as 64-bit IEEE double-precision
point values.

Zero will be a RISC-like system with a single load/store instruction that
operates on memory; the rest of the instruction set is used to manipulate
registers. In addition to these datatypes, the initial design supports 32-bit
integral values.

Registers
---------
- 16 64-bit general purpose registers
- frame pointer register
- stack pointer register
- program counter (instruction pointer) register
- machine status word register

Registers
---------

Mask Registers
--------------

Name	Brief			Notes
----	-----			-----
B0	all zero bits		64-bit
B0L	all zero bits		32-bit lower half of B0 for integer operations
B1	all one bits		64-bit
B1L	all one bits		32-bit lower half of B1 for integer operations

General Purpose Registers
-------------------------

Name	Brief			Notes
----	-----			-----
R0..R15	general purpose		for program use

Special Registers
-----------------

Name	Brief			Notes
----	-----			-----
FP	frame pointer		pointer to current stack frame
SP	stack pointer		pointer to current stack position
PC	program counter		pointer to next instruction to run
MSW	machine status word	status of the latest instruction executed

Machine Status Word
-------------------

The MSW register is used to store the following bits:

CF  - carry
IF  - interrupt flag (1 if interrupts pending)
VF  - overflow
ZF  - zero (result)

Instruction Set
---------------

The instruction names in parentheses indicate potentially optional instructions
to keep the base design minimalistic.

Instruction	# of Arguments	Brief
/* logical bitwise instructions */
NOT		1		2's complement
AND		2		logical AND
OR		2		logical OR
XOR		2		logical exclusive OR

/* shift instructions */
SHR
(SHRA)
SHL
(ROR)
(ROL)

/* ALU instructions */
(INC)
(DEC)
ADD
SUB
CMP
MUL
DIV
MOD

/* comparative instructions */
BZ
BNZ
BLT
BLE
BGT
BGE
BO
BNO
BC
BNC

/* stack operations */
POP
PUSH
PUSHA

/* load/store operations */
MOV
MOVB
MOVW

/* flow control */
JMP
CALL
(ENTER)
(LEAVE)
RET

/* machine status word */
LMSW
SMSW

Instruction Format
------------------
- 3 bits for instruction group:
  - OP_LOG, OP_SHIFT, OP_ARITH, OP_CMP, OP_STK, OP_LDSTR, OP_FLOW, OP_MSW
- 6 bits for instruction ID

