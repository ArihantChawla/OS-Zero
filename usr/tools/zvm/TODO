- implement virtual memory / page-level protection (read-only sections)
- implement [console] I/O and interrupts
  - STDIN, STDOUT, STDERR, STDFB
  - page faults
  - device interrupts
- implement a debugger with graphical frontend
- implement different access sizes (byte, word, longword, quadword)
- io.[c|h], intr.[c|h]
- implement graphical user interfaces for xorg and efl
  - theming with EFL (using signals and messages)
  - debugger functionality (print, step, break, diasasm, show)
    - print prints memory contents
    - step; left-click for one instruction, right to specify number of
      instructions
    - break
      - set breakpoint
    - disasm
      - disassemble a piece of code
    - setup
      - configuration menu
- write a paper or book chapter on developing GUIs with EFL
  - Zero Virtual Machine; Anatomy of a Virtual Architecture
    - preface
  	- design
  	- instruction set
  	  - assembly language interface
  	  - zero assembler
  	- implementation
  	  - symbol lookups
  	  - runtime translation
  	  - configuration
  	  	- default word size is 32-bit
  	- user interface
  	  - executing programs
  	  - the debugger
  	  	- graphical interfaces with X11 + EFL
  	  	- view
  	  	  - registers
  	  	  - current stack frame
  	  	  - variable value lookup
  	  	  - globals (symbol + value)
  	  	  - current file + function/line

modules
-------
- vm; virtual machine implementation
- intr; interrupt handling
- mem; memory manager; mags and slabs
- page; page allocator
- trap; interrupt management/configuration
- io; I/O abstraction
