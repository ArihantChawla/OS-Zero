ZVM Book
--------
- design and implementation of a virtual architecture
  - instruction set, bytecode interpreter
  - assembler (zas) which emits bytecode for zvm
  - currently runtime-translation of assembly programs
- programming the virtual machine
  - assembler
  - debugger; graphical frontend
  - disassembler
- perhaps hack a simple c compiler for the vm :)
  - https://github.com/rswier/c4 for inspiration :)
  - minimalistic standard library with libc-style interface
    - modeled after von Neumann machines
      - CPU
      - memory management
      - I/O
- enlightened graphical interface for debugging and other use of zvm
  - utilise Enlightenment Foundation Libraries (EFL)
    - evas canvas/scene graph
    - edje-scripted, compiled themes
    - elementary for widgets
    - experiment with novel debugger interface/feature ideas, implement
      traditional ones
      - display mode; hex, dec, oct, bin
      - run, break, trace, step, print, cont
      - disassembler
        - file + function + line display
        - signal, stack, trace, intr, memory
          - pending signals + process signal mask
          - stack frame + back-link to caller
          - stack trace from leaf to root "nodes"
          - single-stepping, N-step stepping
          - interrupt vector (addresses, symbols)
            - located at 0x00000000
            - read-only
            - display interrupt handlers
          - memory
            - page directory/tables
- I/O
  - STDIN (port #0) for keyboard input
  - STDOUT (port #1) for console output
  - STDERR (port #2) for error output (optionally logged into file)
  - emulate disks and other devices with files
- graphics
  - framebuffer with 24-bit RGB pixels
    - 800x600 or 1024x768 resolution (window size)
    - store images with ARGB (alpha channel present0
    - double buffering; draw into off-screen buffer and synchronize
      screen contents on-demand (request or periodical with timers)
    - TODO: obtain framebuffer address :)
  - support alpha-blending of overlay images
- text
  - ASCII, ISO 8859-1, Unicode (16-bit or 31-bit)

ZVM GUI Layout
--------------

This file is about ideas for the Zero Virtual Machine project. The graphical
user interface aims to implement new ways to test and debug software using
a graphical debugger frontend. I'm in the hopes of developing such source-
and machine-level debugger frontends for tools such as GDB, Qemu, and Bochs.

--------------------------------------------------------------------------------
graphics window
STDFB
--------------------------------------------------------------------------------
execution console
STDIN, STDOUT, STDERR


                                                                 (adr, sym)
                                                                 keyboard
                                                                    |
                                                  window keyboard (# of steps)
                                    files files      |      |       |
                                    args  keyboard (file:line or function)
                                      |      |       |      |       |
--------------------------------------------------------------------------------
debugger| hex | dec | oct | 32-bit | run | break | trace | step | print | cont |
--------------------------------------------------------------------------------
r0	r1	r2	r3		pc	sp	fp	msw
r4	r5	r6	r7		---------------------------
r8	r9	r10	r11		| stack frame (adr, sym)  |
r12	r13	r14	r15		| args, caller, ret, vars |
					-----------|---------------
--------------------------------------------------------------------------------
disassembler | file | function | line | signal | stack | trace | intr | memory |
--------------------------------------------------------------------------------
mov	$NTRAP, %r0
call	trapinit	<- program counter (aka instruction pointer)
nop
--------------------------------------------------------------------------------

graphics window
---------------
- framebuffer interface, 800x600x24-bit resolution
- double-buffer enabled to minimise flicker
- default is draw on demand;
  - support for optional frame rate setting
  - user-settable scronsync() handler for screen refreshes
    - defaults to drawing main Evas canvas
- framebuffer address

execution console window
------------------------
- C-like standard I/O with ports STDIN (keyboard), STDOUT (console), and STDERR
  (console) streams

debugger buttons
----------------
- hex/dec/oct display modes (bin)
- word size; display, based on the program under execution
- run; argument input + file chooser
- break; set based on file and line or symbol (function name or other label)
- trace; separate window showing disassembly + file + line + function
- step; single, text input for N
- print; address/variable/symbol
- cont; continue execution

disassembler interface
----------------------
- file + function + line display
- signal mask (blocked signals), signal being handled, signal handler window
- stack; function arguments, return address, caller frame pointer, automatic
  variables, stack pointer (window for call chain)
- interrupts; interrupt mask (blocked interrupt level), interrupt being handled,
  interrupt vector
- memory; # of mapped virtual pages, # of mapped physical pages, # of total
  physical pages, page table window

