V0 Architecture Notes
---------------------

V0 is a simple processor architecture initially designed for an educational
programming game. The following lists some key features.

V0 Features
-----------

- 16 general purpose registers named R0 through R15
- MSW (machine status word) register
- FP (frame pointer) register
- SP (stack pointer) register
- PC (program counter) register; some architectures call it instruction pointer
- memory size defined in <v0/conf.h>; 256 megabytes default value
- RISC-like load-store instruction set designed to support the C language
- linear framebuffer graphics interface

Memory Map
----------

- 0..1K             - reserved; triggers exception on reference
- 1K..XX            - text segment; program code, read-only
- _etext..XX        - read-only data segment; strings etc.
- _erodata..XX      - read-write data segment; initialized globals and such
_ _edata..XX        - BSS-segment; unitialized globals, allocated at runtime
- _stack..V0MEMSIZE - stack-segment; specific instruction, grows down
- _fbadr..XX        - linear graphics framebuffer (mapped at 3 gigabytes)

Subroutines
-----------

V0 uses traditional stack frames to implement subroutines. Let's take a quick
look at the related machine instructions.

call
----
- call expects up to 6 arguments in registers R0::R5 and the rest of the
  arguments on the stack pushed in right to left order

- push caller-save registers R0..R7

- call; call subroutine
- enter; create stack frame for subroutine
- leave; destroy stack frame of subroutine
- ret; return from subroutine

I will document the stack frames in more detail soon.

Stack Frame
-----------

arguments
caller-save registers
return address
old frame pointer               <- frame pointer
local variables
callee-save registers

