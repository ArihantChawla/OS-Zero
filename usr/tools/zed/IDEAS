zed - Zero Editor
-----------------
- programmer's editor; later on, possibly with advanced IDE features
  - integration of / modes for different code and related files
    - files for GNU build tools such as
      - Makefile.am
      - configure.ac
      - m4 routines
- c-mode
  - automatic indentation
    - basicofs - 4
    - caseofs  - 4
    -

- buttons always visible
  - save, paste, copy, cut, close, find, indent, navigate

Emacs-like commands
-------------------
C-a			go to beginning of line
C-e			go to end of line
M-<			go to beginning of file
M->			go to end of file
C-x C-c			exit
C-x C-s			save
C-x i or TAB		insert
C-x C-f			open file
C-x b			switch between files/buffers
M-x text-mode		switch to text mode
M-x c-mode		switch to C mode
M-x asm-mode		switch to assembly mode
M-x latex-mode		switch to LaTeX mode
M-x makefile-mode	switch to Makefile mode
M-x calc-mode		switch to calculator mode

Operation modes
---------------
- common mode attributes
  - charset
- text_mode
- c_mode
- asm_mode
- latex_mode
- makefile_mode
- calc_mode; zero programmer's calculator
  - support for C operators with different word sizes
  - decimal, hexadecimal, octal, and binary display modes
  - support for IEEE 754 floating point values; 32-bit float and 64-bit double
  - MMIX assembly programming support (maybe in AT&T syntax, though)

C-programming support
---------------------
- common hooks
  - file_read
  - file_write
- per-mode hooks for different events
  - file_tokenize
  - file_lex
  - file_indent
  - file_commit
  - file_assemble
- auto-indent
  - zero-mode (.c/.h, .s/.S) as default
  - offsets for different tokens such as 4 for '{' and -4 for '}'
    - blkofs (current block offset), parofs (current parenthesis offset)
      - indent to the max offset + baseofs
- syntax highlights
  - use zcc tokeniser to implement syntax visualisation

Editor objects
--------------
- file
- buf

