Zero Source Roadmap
-------------------

notes/
------
- development and other notes

kern/
-----
- kernel source tree

	kern/
	-----
	- higher half kernel implementation
	  - ev			- event interface
	  - mem			- high-level memory interface
	  - obj			- kernel objects
	  - perm		- permission checks
	  - syscall		- system call interface
	  - types		- kernel type declarations
	  - util		- miscellaneous utilities

	kern/io/
	--------
	- I/O interface
	  - buf			- buffer cache
	  - blk			- block-based I/O routines
	  - chr			- character-based "raw" I/O

	kern/io/fs/
	-----------
	- filesystem implementations

	kern/io/drv
	-----------
	- kernel I/O drivers

	kern/io/drv/blk/
	----------------
	- block device drivers

	kern/io/drv/bus/
	----------------
	- bus drivers

	kern/io/drv/chr/
	----------------
	- character device interface

	kern/io/drv/pc
	--------------
	- standard PC device drivers
	  - ps2			- PS/2 keyboard and mouse driver
	  - vbe2		- VBE2 graphics support
	  - vga.c, vga.h	- VGA text console support

	kern/mem
	--------
	- kernel memory management
	  - mag			- magazine allocator
	  - page		- page daemon
	  - slab		- slab allocator routines

	kern/proc/
	----------
	- process interface
	  - proc		- process interface
	  - sched		- thread scheduler
	  - sig			- signal interface
	  - task		- process and thread abstractions
	  - thr			- thread scheduler
	  - tmr			- timer interface

	kern/unit/
	----------
	- lower-half kernel

	kern/unit/ia32
	--------------
	- IA-32 platform version of [32-bit] kernel

usr/
----
- user software

	usr/lib/c
	---------
	- C standard library

	usr/lib/m
	---------
	- ISO C / IEEE 754 math library

	usr/lib/m/i387
	--------------
	- i387-specific parts of libm

	usr/lib/zero
	------------
	- Zero base library
	- <zero/asm.h>		- assembly machine interface
	  - IA-32, ARM, and X86-64 versions; machine specific operations
	  - m_membar()		- memory barrier for serial access
	  - m_waitint()		- pause until interrupt is received
	  - m_cmpswap()		- atomic compare and swap
	  - m_getretadr()	- get return address from stack frame, TODO: ARM
	- <zero/cdecl.h>	- compiler interface
	- <zero/mtx.h>		- custom mutexes, faster than pthread_mutex_t
	  - supported architectures IA-32, ARM, X86-64
	- <zero/param.h>	- machine parameters
	- <zero/randk.h>	- Knuth's random number generator
	- <zero/trix.h>		- nice tricks; small bitwise etc. operations
	- <zero/types.h>	- machine types
	- <zero/unix.h>		- Unix interface

	usr/games/
	----------
	- a few game ideas (so far)

	usr/tools/
	----------

	wpm/
	----
	- wizard pseudo machine, i.e. a virtual architecture project

	zpc/
	----
	- zero programmer's calculator

