/*
 * IDEAS
 * -----
 * - use event timers to schedule short-lived tasks such as audio and video
 *   buffer synchronisation (HPET on x86)
 * - use some timers for scheduling GPU threads (OpenCL)
 */

/* window events */
#define EVWINCREATE     0x0c            // new window created
#define EVWINMAP        0x0d            // window mapped
#define EVWINDESTROY    0x0e            // window destroyd
#define EVWINUNMAP      0x0f            // window unmapped
#define EVWINEXPOSE     0x10            // part of window exposed
#define EVWINVISIBILITY 0x11            // window visibility changed
#define EVWINPROPERTY   0x12            // window property actions

/* processor interface */

/* system-assigned process IDs */
#define PROCKERN  0	// main kernel; context switches, system calls, ...
#define PROCINIT  1	// init process
#define PROCPAGED 2	// page daemon; page replacement; aging, LRU-queue
#define PROCBUFD  3	// buffer daemon; flush dirty buffers to disk

/* memory interface */

void *brk(intptr_t ofs);
void *balloc(size_t nbytes, long flg);
void *bmap(size_t nbytes, long flg, void *adr);
void *umalloc(size_t nbytes);

struct heap {
   uintptr_t  brk;
};

#define BUFWIRED     0x01	// map physical memory permanently
#define BUFSINGLE    0x02	// one user and one kernel thread at a time
#define BUFDEV       0x04	// device I/O buffer
#define BUFNET       0x08	// network I/O buffer
#define BUFFILE      0x10	// file I/O buffer
#define BUFSEQ       0x20	// sequential buffer
#define BUFSYNC      0x40	// synchronous I/O
#define BUFREADAHEAD 0x80	// use read-ahead buffering

struct iobuf {
    long    fd;
    long    perm;
    long    flg;
    off_t   pos;
    size_t  sz;
    void   *data;
};
