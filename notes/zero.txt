/*
 * SCHED
 * -----
 * - scheduler ideas
 * - boost interactivity score when application gets input focus
 */

/*
 * IDEAS
 * -----
 * - use event timers to schedule short-lived tasks such as audio and video
 *   buffer synchronisation (HPET on x86)
 * - use some timers for scheduling GPU threads (OpenCL)
 */

/* window events */
#define EVWINCREATE     0x0c            // new window created
#define EVWINMAP        0x0d            // window mapped
#define EVWINDESTROY    0x0e            // window destroyd
#define EVWINUNMAP      0x0f            // window unmapped
#define EVWINEXPOSE     0x10            // part of window exposed
#define EVWINVISIBILITY 0x11            // window visibility changed
#define EVWINPROPERTY   0x12            // window property actions

/* processor interface */

/* memory interface */

void *brk(intptr_t ofs);
void *balloc(size_t nbytes, long flg);
void *bmap(size_t nbytes, long flg, void *adr);
void *umalloc(size_t nbytes);

struct heap {
   uintptr_t  brk;
};

/* I/O buffer flags */
#define BUFWIRED     0x00000001	// map physical memory permanently
#define BUFSINGLE    0x00000002	// one user and one kernel thread at a time
#define BUFBLK       0x00000004 // block-based I/O (raw/character if not set)
#define BUFDEV       0x00000008	// device I/O buffer
#define BUFNET       0x00000010	// network I/O buffer
#define BUFFILE      0x00000020	// file I/O buffer
#define BUFSEQ       0x00000040	// sequential buffer
#define BUFSYNC      0x00000080	// synchronous I/O
#define BUFREADAHEAD 0x00000100	// use read-ahead buffering
struct iobuf {
    off_t         pos;        // current position/offset
    size_t        sz;         // buffer size in bytes
    long          fd;         // system descriptor
    long          perm;       // I/O permissions
    long          flg;        // buffer flags
    long          cksum;      // IP4- or other checksum
    void         *data;       // buffer data block
    struct iobuf *next;
};

/* struct ioparm flag-bits (flg-field) */
#define IOSEQBIT  0x01          // do sequential I/O; don't keep old buffers
#define IOSYNCBIT 0x02          // do synchronous I/O
#define IOBUFBIT  0x04          // enable read-ahead buffering
struct ioparm {
    long   flg;                 // I/O-modes and such flags
    long   perm;                // permission bits
    size_t bufsz;               // read-ahead buffer size in bytes
};

struct iodesc {
    long id;                    // descriptor [numerical] ID
    struct ioparm *parm;
};

