Zero Virtual Filesystem Plans and Ideas
---------------------------------------
- show nodes Unix-style in a single tree
- device and other special nodes under /dev
- per-process accounting under /proc
- system accounting under /sys

Node Types
----------
- these are the low-level node types; the system shall do further identification
  and other processing in user application space

- link; hard link
- symlink; symbolic link
- file; regular file
- dir; directory (of files)
- fifo; a [bi-directional] pipe
- sock; Berkeley-style network socket
- mtx; binary semaphore (mutex)
- sem; generic semaphore
- mq; message queues (with priorities)
- rwlk; read-write lock
- meta? per-file metadata, db-like interface (DB2?)
- chr; raw/character device
- blk; block device

Locks
-----
- locks are managed in a filesystem-persistent fashion; they only disappear at
  system reset time
- kernel locks must be governed by system-global mutexes
- for read-write locks, it's possible to use per-user locks (such as daemon lock
  files)
- a read-write lock could be named /fs/lock/123/456.rwlk for the inode 456 on
  device ID 123. This would facilitate more portable, less-hassle lock files for
  user processes (their executables).

